// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/middleware"
	"seg-server/internal/biz"
	"seg-server/internal/conf"
	"seg-server/internal/data"
	"seg-server/internal/server"
	"seg-server/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, middlewareMiddleware middleware.Middleware, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewGormClient(confData, logger)
	client := data.NewEtcdClient(confData, logger)
	dataData, cleanup, err := data.NewData(confData, db, client, logger)
	if err != nil {
		return nil, nil, err
	}
	segmentIDGenRepo := data.NewSegmentIdGenRepo(dataData, logger)
	segmentIdGenUsecase := biz.NewSegmentIdGenUsecase(segmentIDGenRepo, bootstrap, logger)
	snowflakeIDGenRepo := data.NewSnowflakeRepo(dataData, logger)
	snowflakeIdGenUsecase := biz.NewSnowflakeIDGenUsecase(snowflakeIDGenRepo, bootstrap, logger)
	idGenService := service.NewIdGenService(segmentIdGenUsecase, snowflakeIdGenUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, idGenService, middlewareMiddleware, logger)
	grpcServer := server.NewGRPCServer(confServer, idGenService, middlewareMiddleware, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
