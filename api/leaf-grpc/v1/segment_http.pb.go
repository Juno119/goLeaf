// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type LeafHTTPServer interface {
	GenSegmentId(context.Context, *IDRequest) (*IDReply, error)
}

func RegisterLeafHTTPServer(s *http.Server, srv LeafHTTPServer) {
	r := s.Route("/")
	r.GET("/api/segment/get/{tag}", _Leaf_GenSegmentId0_HTTP_Handler(srv))
}

func _Leaf_GenSegmentId0_HTTP_Handler(srv LeafHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/leafgrpc.v1.Leaf/GenSegmentId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenSegmentId(ctx, req.(*IDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IDReply)
		return ctx.Result(200, reply)
	}
}

type LeafHTTPClient interface {
	GenSegmentId(ctx context.Context, req *IDRequest, opts ...http.CallOption) (rsp *IDReply, err error)
}

type LeafHTTPClientImpl struct {
	cc *http.Client
}

func NewLeafHTTPClient(client *http.Client) LeafHTTPClient {
	return &LeafHTTPClientImpl{client}
}

func (c *LeafHTTPClientImpl) GenSegmentId(ctx context.Context, in *IDRequest, opts ...http.CallOption) (*IDReply, error) {
	var out IDReply
	pattern := "/api/segment/get/{tag}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/leafgrpc.v1.Leaf/GenSegmentId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
